/* 1-Adding Photo: We could store photo in MySQL using data type of BLOB (Binary Large Object)(up to 64KB), MEDIUMBLOB (up to 16MBytes), LONGBOLB(up to 4GBytes).  For example, you can conveniently load and view the photo via graphical tools such as MYSQL Workbench.  To load a image in MySQL Workbench => right click on the cell => Load Value From File => Select the image file.  To view the image => right click on the BLOB cell => Open Value in Editor => choose "image" pane. */

UPDATE Vehicles SET photo=LOAD_FILE('/var/lib/mysql/images/Car2.jpg') WHERE veh_reg_no = 'SBA1111A';

SELECT * FROM Vehicles WHERE veh_reg_no = 'SBA1111A' \G



/* 2-VIEW: Create a VIEW called rental_prices on the rental_records with an additional column called price.  Show all the records of the VIEW. */

DROP VIEW IF EXISTS rental_prices;

CREATE VIEW rental_prices
AS
SELECT
v.veh_reg_no    AS `Vehicle No`,
v.daily_rate    AS `Daily Rate`,
c.name          AS `Customer Name`,
c.discount*100  AS `Customer Discount (%)`,
r.start_date    AS `Start Date`,
r.end_date      AS `End Date`,
DATEDIFF(r.end_date, r.start_date) AS `Duration`,
CAST(
IF (DATEDIFF(r.end_date, r.start_date) < 7,
DATEDIFF(r.end_date, r.start_date)*daily_rate*(1-discount),
DATEDIFF(r.end_date, r.start_date)*daily_rate*(1-discount)*0.8)
AS DECIMAL(8,2)) AS price
FROM rental_records AS r
INNER JOIN Vehicles  AS v USING (veh_reg_no)
INNER JOIN Customers AS c USING (customer_id);

DESC `rental_prices`;

SHOW CREATE VIEW `rental_prices` \G

SELECT * FROM `rental_prices`;



/* 3-From the payments table, create a view to show the outstanding balance. */

CREATE VIEW Outstanding_Balance
AS
SELECT
(CAST(
IF (DATEDIFF(r.end_date, r.start_date) < 7,
DATEDIFF(r.end_date, r.start_date)*daily_rate*(1-discount),
DATEDIFF(r.end_date, r.start_date)*daily_rate*(1-discount)*0.8)
AS DECIMAL(8,2)) - p.amount) AS 'Out_Bal'
FROM rental_records as r
INNER JOIN Vehicles as v USING(veh_reg_no)
INNER JOIN Customers as c USING(customer_id)
INNER JOIN Payments as p USING(rental_id); 



/* 4-Define more views. */

/*Select all customers rented the following car 'SBA1111A'. */

CREATE VIEW rental_SBA1111A
AS
SELECT 
r.rental_id AS 'Rental ID',
c.customer_id AS 'Customer ID',
c.name AS 'Customer Name',
DATEDIFF(r.end_date,r.start_date) AS 'Duration'
FROM rental_records AS r
INNER JOIN Customers as c USING(customer_id)
WHERE veh_reg_no = 'SBA1111A';

/*Select all records of rentals by 'Tan Ah Teck'. */

CREATE VIEW rentals_Tan
AS 
SELECT 
r.rental_id AS 'Rental_id',
r.start_date AS 'Start Date',
r.end_date AS 'End Date',
r.veh_reg_no AS 'Registration No'
FROM rental_records as r
INNER JOIN Customers AS c USING(customer_id)
WHERE c.name = 'Tan Ah Teck';



/* 5-FUNCTION: Write a function to compute the rental price. */

DELIMITER //

CREATE FUNCTION rental_prices(end_date DATE, start_date DATE, daily_rate DECIMAL(6,2),discount DOUBLE) 
RETURNS DECIMAL(8,2) NOT DETERMINISTIC

BEGIN
DECLARE Price DECIMAL(8,2);
IF DATEDIFF(end_date,start_date) < 7 THEN
SET Price = DATEDIFF(end_date,start_date)*daily_rate*(1-discount);
ELSE
SET Price = DATEDIFF(end_date,start_date)*daily_rate*(1-discount)*0.8;
END IF;
RETURN (Price);
END //

DELIMITER ; 

Select rental_price('2014-09-23', '2014-09-13', 99.99, 0.1);

Select * from rental_prices \G --Comparing the results



/* 6-Define more procedures and functions. */

/*Create a function, you can compute the outstanding balance and name it 'Outstanding Balance'.  */

DELIMITER //

CREATE FUNCTION Outstanding_Balance(Price DECIMAL(8,2), Amount DECIMAL(8,2))
RETURNS DECIMAL(8,2) DETERMINISTIC
BEGIN
DECLARE Out_Bal DECIMAL(8,2);
SET Out_Bal = Price - Amount;
RETURN (Out_Bal);
END //

DELIMITER ;

SELECT Outstanding_Balance(719.63,119.63) AS Outstanding_Balance;

/*Create a procedure to calculate the total amount paid per rental. */

DELIMITER //

CREATE PROCEDURE Sum_Payments(IN Amount1 DECIMAL(6,2), IN Amount2 DECIMAL(6,2), IN Amount3 DECIMAL(6,2))
BEGIN
DECLARE Sum_Payments DECIMAL(6,2);
SET Sum_Payments = Amount1 + Amount2 + Amount3;
SELECT Sum_Payments;
END //

DELIMITER ;

CALL Sum_Payments(100, 200, 250);

/* Create a procedure where you can check the amount of times vehicle 'SBA1111A' was rented out. */

DELIMITER //

CREATE PROCEDURE SBA1111A_count (veh_no VARCHAR(8))
BEGIN
SELECT COUNT(*) AS S_count FROM rental_records 
WHERE rental_records.veh_reg_no = veh_no;
END //

DELIMITER ;

CALL SBA1111A_count('SBA1111A');

SELECT * FROM rental_records WHERE veh_reg_no = 'SBA1111A' \G



/* 7-TRIGGER: Write a trigger for the created_date and created_by columns of the payments table. */

DELIMITER //

CREATE TRIGGER Created BEFORE INSERT ON Payments
FOR EACH ROW
BEGIN
SET NEW.created_by = (SELECT staff_id FROM staff WHERE staff.name = 'Peter Johns');
SET NEW.created_date = NOW();
END //

DELIMITER ;

INSERT INTO Payments (rental_id, amount, mode, type, remark, last_updated_date, last_updated_by, staff_id)
VALUES (6, 2000.27,'credit card','full','It is great!',
NOW(),8001,8001); 

SELECT * FROM Payments \G

DELIMITER //

CREATE TRIGGER Created_Update BEFORE UPDATE ON Payments
FOR EACH ROW
BEGIN
SET NEW.created_by = (SELECT staff_id FROM staff WHERE staff.name = 'Christine Wu');  --staff_id = 8003
SET NEW.created_date = NOW();
END //

DELIMITER ;

UPDATE Payments SET amount= '1500.50' WHERE payment_id = 12; 

SELECT * FROM Payments \G



/* 8-Define more triggers. */

DELIMITER //

CREATE TRIGGER staff_handled BEFORE INSERT ON rental_records
FOR EACH ROW
BEGIN
SET NEW.staff_id = (SELECT staff_id FROM staff WHERE staff.name = 'Christine Wu');
END //

DELIMITER ;

INSERT INTO rental_records (veh_reg_no,customer_id,start_date,end_date,lastUpdated) VALUES ('SBC3333C','1004','2014-12-20','2014-12-30',NOW()); 

DELIMITER //

CREATE TRIGGER staff_handled_Updated BEFORE UPDATE ON rental_records
FOR EACH ROW
BEGIN
SET NEW.staff_id = (SELECT staff_id FROM staff WHERE staff.name = 'Peter Johns');
END //

DELIMITER ;

UPDATE rental_records SET end_date = ('2014-12-31') WHERE rental_id = 7;

SELECT * FROM rental_records WHERE rental_id = 7 \G



/* 9-Implement discount on weekday (Monday to Friday, except public holiday): Need to set up a new table called public_holiday with columns date and description.  Use function DAYOFWEEK(1=Sunday,...,7=Saturday) to check for weekday or weekend. 

Pseudocode for calculating rental price:

price = 0;
for each date from start_date to end_date {
if date is weekend or public_holiday, price += daily_rate;
else price += dailiy_rate*(1-discount);
}
if (duration >= 7) price *= (1-long_duration_discount);
price *= (1-perfered_customer_discount);

*/

CREATE TABLE public_holiday (
`date` DATE NOT NULL,
`description` VARCHAR(30) NOT NULL
)ENGINE=InnoDB;

INSERT INTO public_holiday VALUES 
('2014-12-25','Christmas Day');


DELIMITER //

CREATE FUNCTION rental_price_hol (start_date DATE, end_date DATE, daily_rate DECIMAL(6,2),discount DOUBLE) 
RETURNS DECIMAL(8,2) NOT DETERMINISTIC

BEGIN 
DECLARE price DECIMAL(8,2);
DECLARE test_date DATE;
SET test_date = start_date;
SET price = 0;


REPEAT

IF ((DAYOFWEEK(test_date) = 1 OR 7) OR (test_date = public_holiday.`date`)) 
THEN SET price = price + daily_rate;
ELSE 
SET price = price + (daily_rate*(1-discount));
END IF;

SET test_date = DATE_ADD(test_date,INTERVAL 1 DAY);
UNTIL test_date > end_date
END REPEAT;

IF DATEDIFF(end_date,start_date) >= 7
THEN SET price = price*(1-discount)*0.8;
ELSE
SET price = price*(1-discount);
END IF;

RETURN(price); 
END // 

DELIMITER ;

SELECT rental_price_hol('2014-10-12','2014-10-18',119.99,0.10); 






































		

















 
